import os
import uuid
from pathlib import Path
from typing import List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–ø–∫–∏ –¥–ª—è –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π TTS
MODELS_DIR = Path(__file__).parent / 'models'
MODELS_DIR.mkdir(exist_ok=True)
os.environ['TTS_HOME'] = str(MODELS_DIR)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ–º—Å—è —Å –ª–∏—Ü–µ–Ω–∑–∏–µ–π Coqui TTS
os.environ['COQUI_TOS_AGREED'] = '1'

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import transformers
        from transformers import __version__ as transformers_version
        
        version_parts = transformers_version.split('.')
        major, minor = int(version_parts[0]), int(version_parts[1])
        
        if major > 4 or (major == 4 and minor >= 40):
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è transformers")
            print(f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {transformers_version}")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: transformers==4.35.2")
            print("üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python fix_dependencies.py")
            
    except ImportError:
        print("‚ö†Ô∏è Transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
check_dependencies()

from fastapi import FastAPI, Request, Form, HTTPException, UploadFile, File
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

from services.tts import generate_audio

app = FastAPI(title='TTS Generator')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory='templates')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/output", StaticFiles(directory="output"), name="output")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('output', exist_ok=True)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = Path('uploads')
UPLOAD_DIR.mkdir(exist_ok=True)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ TTS —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
AVAILABLE_MODELS = {
    'üåç –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞': [
        {
            'id': 'tts_models/multilingual/multi-dataset/xtts_v2',
            'name': 'XTTS v2 Multilingual',
            'description': 'XTTS-v2.0.3 by Coqui —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 17 —è–∑—ã–∫–æ–≤ –∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞',
            'language': 'multilingual',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': True,
            'speakers': True
        },
        {
            'id': 'tts_models/multilingual/multi-dataset/xtts_v1.1',
            'name': 'XTTS v1.1 Multilingual',
            'description': 'XTTS-v1.1 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 14 —è–∑—ã–∫–æ–≤ –∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞',
            'language': 'multilingual',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': True,
            'speakers': True
        },
        {
            'id': 'tts_models/multilingual/multi-dataset/your_tts',
            'name': 'YourTTS Multilingual',
            'description': 'Your TTS –º–æ–¥–µ–ª—å —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —è–∑—ã–∫–æ–≤',
            'language': 'multilingual',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': True,
            'speakers': True
        },
        {
            'id': 'tts_models/multilingual/multi-dataset/bark',
            'name': 'Bark Multilingual',
            'description': 'üê∂ Bark TTS –º–æ–¥–µ–ª—å —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞',
            'language': 'multilingual',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': True,
            'speakers': True
        }
    ],
    'üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/en/ljspeech/tacotron2-DDC',
            'name': 'LJSpeech Tacotron2-DDC',
            'description': 'Tacotron2 —Å Double Decoder Consistency - –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–Ω–≥–ª–∏–π—Å–∫–∞—è —Ä–µ—á—å',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/ljspeech/tacotron2-DDC_ph',
            'name': 'LJSpeech Tacotron2-DDC Phonemes',
            'description': 'Tacotron2 —Å Double Decoder Consistency –∏ —Ñ–æ–Ω–µ–º–∞–º–∏',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/ljspeech/glow-tts',
            'name': 'LJSpeech Glow-TTS',
            'description': 'Glow-TTS –º–æ–¥–µ–ª—å —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ç–µ–º–ø–∞ —Ä–µ—á–∏',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/ljspeech/speedy-speech',
            'name': 'LJSpeech Speedy Speech',
            'description': 'Speedy Speech —Å Alignment Network –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'medium',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/ljspeech/tacotron2-DCA',
            'name': 'LJSpeech Tacotron2-DCA',
            'description': 'Tacotron2 —Å Double Decoder Consistency',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/ljspeech/vits',
            'name': 'LJSpeech VITS',
            'description': 'VITS End2End TTS –º–æ–¥–µ–ª—å —Å —Ñ–æ–Ω–µ–º–∞–º–∏',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/ljspeech/fast_pitch',
            'name': 'LJSpeech FastPitch',
            'description': 'FastPitch –º–æ–¥–µ–ª—å —Å Aligner Network',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'medium',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/ljspeech/overflow',
            'name': 'LJSpeech Overflow',
            'description': 'Overflow –º–æ–¥–µ–ª—å, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ LJSpeech',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/ljspeech/neural_hmm',
            'name': 'LJSpeech Neural HMM',
            'description': 'Neural HMM –º–æ–¥–µ–ª—å, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ LJSpeech',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/vctk/vits',
            'name': 'VCTK VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å —Å 109 —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–∏–∫–µ—Ä–∞–º–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': True
        },
        {
            'id': 'tts_models/en/vctk/fast_pitch',
            'name': 'VCTK FastPitch',
            'description': 'FastPitch –º–æ–¥–µ–ª—å, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ VCTK –¥–∞—Ç–∞—Å–µ—Ç–µ',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'medium',
            'voice_cloning': False,
            'speakers': True
        },
        {
            'id': 'tts_models/en/sam/tacotron-DDC',
            'name': 'Sam Tacotron-DDC',
            'description': 'Tacotron2 —Å Double Decoder Consistency, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ Sam –¥–∞—Ç–∞—Å–µ—Ç–µ',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/blizzard2013/capacitron-t2-c50',
            'name': 'Blizzard2013 Capacitron-T2-C50',
            'description': 'Capacitron –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ Tacotron 2 —Å Capacity 50',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/blizzard2013/capacitron-t2-c150_v2',
            'name': 'Blizzard2013 Capacitron-T2-C150 v2',
            'description': 'Capacitron –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ Tacotron 2 —Å Capacity 150',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/multi-dataset/tortoise-v2',
            'name': 'Tortoise v2',
            'description': 'Tortoise TTS –º–æ–¥–µ–ª—å —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/jenny/jenny',
            'name': 'Jenny VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ Jenny(Dioco) –¥–∞—Ç–∞—Å–µ—Ç–µ',
            'language': 'en',
            'gender': 'female',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/en/ek1/tacotron2',
            'name': 'EK1 Tacotron2',
            'description': 'EK1 en-rp tacotron2 by NMStoker',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        }
    ],
    'üá©üá™ –ù–µ–º–µ—Ü–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/de/thorsten/tacotron2-DDC',
            'name': 'Thorsten Tacotron2-DDC',
            'description': 'Thorsten-Dec2021-22k-DDC - –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–µ–º–µ—Ü–∫–∞—è —Ä–µ—á—å',
            'language': 'de',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/de/thorsten/tacotron2-DCA',
            'name': 'Thorsten Tacotron2-DCA',
            'description': 'Tacotron2 —Å Double Decoder Consistency –¥–ª—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'de',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/de/thorsten/vits',
            'name': 'Thorsten VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'de',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/de/css10/vits-neon',
            'name': 'German CSS10 VITS-Neon',
            'description': 'VITS-Neon –º–æ–¥–µ–ª—å –¥–ª—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'de',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        }
    ],
    'üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/fr/mai/tacotron2-DDC',
            'name': 'MAI French Tacotron2-DDC',
            'description': 'Tacotron2 —Å Double Decoder Consistency –¥–ª—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'fr',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/fr/css10/vits',
            'name': 'French CSS10 VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'fr',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        }
    ],
    'üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/es/mai/tacotron2-DDC',
            'name': 'MAI Spanish Tacotron2-DDC',
            'description': 'Tacotron2 —Å Double Decoder Consistency –¥–ª—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'es',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/es/css10/vits',
            'name': 'Spanish CSS10 VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'es',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        }
    ],
    'üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/it/mai_female/glow-tts',
            'name': 'MAI Italian Female Glow-TTS',
            'description': 'GlowTTS –º–æ–¥–µ–ª—å –¥–ª—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å)',
            'language': 'it',
            'gender': 'female',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/it/mai_female/vits',
            'name': 'MAI Italian Female VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å)',
            'language': 'it',
            'gender': 'female',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/it/mai_male/glow-tts',
            'name': 'MAI Italian Male Glow-TTS',
            'description': 'GlowTTS –º–æ–¥–µ–ª—å –¥–ª—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å)',
            'language': 'it',
            'gender': 'male',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/it/mai_male/vits',
            'name': 'MAI Italian Male VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å)',
            'language': 'it',
            'gender': 'male',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        }
    ],
    'üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/ja/kokoro/tacotron2-DDC',
            'name': 'Japanese Kokoro Tacotron2-DDC',
            'description': 'Tacotron2 —Å Double Decoder Consistency, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ Kokoro Speech Dataset',
            'language': 'ja',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        }
    ],
    'üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/zh-CN/baker/tacotron2-DDC-GST',
            'name': 'Chinese Baker Tacotron2-DDC-GST',
            'description': 'Tacotron2 —Å Double Decoder Consistency –∏ GST –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'zh',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        }
    ],
    'üá≥üá± –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/nl/mai/tacotron2-DDC',
            'name': 'MAI Dutch Tacotron2-DDC',
            'description': 'Tacotron2 —Å Double Decoder Consistency –¥–ª—è –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'nl',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/nl/css10/vits',
            'name': 'Dutch CSS10 VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'nl',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        }
    ],
    'üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/uk/mai/glow-tts',
            'name': 'MAI Ukrainian Glow-TTS',
            'description': 'GlowTTS –º–æ–¥–µ–ª—å –¥–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'uk',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/uk/mai/vits',
            'name': 'MAI Ukrainian VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'uk',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        }
    ],
    'üáπüá∑ –¢—É—Ä–µ—Ü–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/tr/common-voice/glow-tts',
            'name': 'Turkish Common Voice Glow-TTS',
            'description': '–¢—É—Ä–µ—Ü–∫–∞—è GlowTTS –º–æ–¥–µ–ª—å —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å–ø–∏–∫–µ—Ä–æ–º –∏–∑ Common-Voice –¥–∞—Ç–∞—Å–µ—Ç–∞',
            'language': 'tr',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        }
    ],
    'üáµüá± –ü–æ–ª—å—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/pl/mai_female/vits',
            'name': 'MAI Polish Female VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å)',
            'language': 'pl',
            'gender': 'female',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        }
    ],
    'üáßüáæ –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/be/common-voice/glow-tts',
            'name': 'Belarusian Common Voice Glow-TTS',
            'description': '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è GlowTTS –º–æ–¥–µ–ª—å, —Å–æ–∑–¥–∞–Ω–Ω–∞—è @alex73',
            'language': 'be',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        }
    ],
    'üåç –î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏': [
        {
            'id': 'tts_models/bg/cv/vits',
            'name': 'Bulgarian VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –±–æ–ª–≥–∞—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'bg',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/cs/cv/vits',
            'name': 'Czech VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —á–µ—à—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'cs',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/da/cv/vits',
            'name': 'Danish VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –¥–∞—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'da',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/et/cv/vits',
            'name': 'Estonian VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —ç—Å—Ç–æ–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'et',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/ga/cv/vits',
            'name': 'Irish VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –∏—Ä–ª–∞–Ω–¥—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'ga',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/hu/css10/vits',
            'name': 'Hungarian VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –≤–µ–Ω–≥–µ—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'hu',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/el/cv/vits',
            'name': 'Greek VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –≥—Ä–µ—á–µ—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'el',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/fi/css10/vits',
            'name': 'Finnish VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —Ñ–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'fi',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/hr/cv/vits',
            'name': 'Croatian VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —Ö–æ—Ä–≤–∞—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'hr',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/lt/cv/vits',
            'name': 'Lithuanian VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –ª–∏—Ç–æ–≤—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'lt',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/lv/cv/vits',
            'name': 'Latvian VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –ª–∞—Ç—ã—à—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'lv',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/mt/cv/vits',
            'name': 'Maltese VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –º–∞–ª—å—Ç–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'mt',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/pt/cv/vits',
            'name': 'Portuguese VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'pt',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/ro/cv/vits',
            'name': 'Romanian VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —Ä—É–º—ã–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'ro',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/sk/cv/vits',
            'name': 'Slovak VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–≤–∞—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'sk',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/sl/cv/vits',
            'name': 'Slovenian VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–≤–µ–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'sl',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/sv/cv/vits',
            'name': 'Swedish VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —à–≤–µ–¥—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            'language': 'sv',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/ca/custom/vits',
            'name': 'Catalan VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è –∫–∞—Ç–∞–ª–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ 101460 –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è—Ö –æ—Ç 257 —Å–ø–∏–∫–µ—Ä–æ–≤',
            'language': 'ca',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/fa/custom/glow-tts',
            'name': 'Persian Female Glow-TTS',
            'description': '–ü–µ—Ä—Å–∏–¥—Å–∫–∞—è GlowTTS –º–æ–¥–µ–ª—å (–∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å)',
            'language': 'fa',
            'gender': 'female',
            'quality': 'medium',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/bn/custom/vits-male',
            'name': 'Bangla Male VITS',
            'description': '–ë–µ–Ω–≥–∞–ª—å—Å–∫–∞—è VITS –º–æ–¥–µ–ª—å (–º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å)',
            'language': 'bn',
            'gender': 'male',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/bn/custom/vits-female',
            'name': 'Bangla Female VITS',
            'description': '–ë–µ–Ω–≥–∞–ª—å—Å–∫–∞—è VITS –º–æ–¥–µ–ª—å (–∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å)',
            'language': 'bn',
            'gender': 'female',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/ewe/openbible/vits',
            'name': 'Ewe VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —è–∑—ã–∫–∞ —ç–≤–µ',
            'language': 'ewe',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/hau/openbible/vits',
            'name': 'Hausa VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —è–∑—ã–∫–∞ —Ö–∞—É—Å–∞',
            'language': 'hau',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/lin/openbible/vits',
            'name': 'Lingala VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —è–∑—ã–∫–∞ –ª–∏–Ω–≥–∞–ª–∞',
            'language': 'lin',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/tw_akuapem/openbible/vits',
            'name': 'Twi Akuapem VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —è–∑—ã–∫–∞ —Ç–≤–∏ (–∞–∫—É–∞–ø–µ–º)',
            'language': 'tw_akuapem',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/tw_asante/openbible/vits',
            'name': 'Twi Asante VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —è–∑—ã–∫–∞ —Ç–≤–∏ (–∞—à–∞–Ω—Ç–∏)',
            'language': 'tw_asante',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        },
        {
            'id': 'tts_models/yor/openbible/vits',
            'name': 'Yoruba VITS',
            'description': 'VITS –º–æ–¥–µ–ª—å –¥–ª—è —è–∑—ã–∫–∞ –π–æ—Ä—É–±–∞',
            'language': 'yor',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False,
            'speakers': False
        }
    ]
}

def get_unique_filename(output_dir: str, filename: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    base_path = Path(output_dir) / filename
    if not base_path.exists():
        return str(base_path)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    stem = base_path.stem
    suffix = base_path.suffix
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π UUID
    unique_filename = f'{stem}_{uuid.uuid4().hex[:8]}{suffix}'
    return str(Path(output_dir) / unique_filename)

@app.get('/', response_class=HTMLResponse)
async def index(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π"""
    return templates.TemplateResponse('index.html', {
        'request': request,
        'models': AVAILABLE_MODELS
    })

@app.post('/generate')
async def generate_tts(
    text: str = Form(...),
    model_name: str = Form(...),
    output_filename: str = Form(...),
    speaker_file: UploadFile = File(None),
    language: str = Form(None),
    speaker: str = Form(None)
):
    """API endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not text.strip():
            raise HTTPException(status_code=400, detail='–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        
        if not output_filename.strip():
            raise HTTPException(status_code=400, detail='–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ª—é–±–æ–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        model_exists = False
        for category_models in AVAILABLE_MODELS.values():
            for model in category_models:
                if model['id'] == model_name:
                    model_exists = True
                    break
            if model_exists:
                break
        
        if not model_exists:
            raise HTTPException(status_code=400, detail='–ù–µ–≤–µ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .wav –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not output_filename.endswith('.wav'):
            output_filename += '.wav'
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        output_path = get_unique_filename('output', output_filename)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–∑—Ü–∞ –≥–æ–ª–æ—Å–∞
        speaker_wav_path = None
        if speaker_file and speaker_file.filename:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            allowed_extensions = ['.wav', '.mp3', '.flac', '.m4a']
            file_ext = Path(speaker_file.filename).suffix.lower()
            if file_ext not in allowed_extensions:
                raise HTTPException(
                    status_code=400, 
                    detail=f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {", ".join(allowed_extensions)}'
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            speaker_filename = f'speaker_{uuid.uuid4().hex[:8]}{file_ext}'
            speaker_wav_path = UPLOAD_DIR / speaker_filename
            
            with open(speaker_wav_path, 'wb') as f:
                content = await speaker_file.read()
                f.write(content)
            
            print(f"üìÅ Speaker file saved: {speaker_wav_path}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        generate_audio(
            text=text,
            model_name=model_name,
            output_path=output_path,
            gpu=True,
            speaker_wav=str(speaker_wav_path) if speaker_wav_path else None,
            language=language,
            speaker=speaker
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–∑—Ü–∞ –≥–æ–ª–æ—Å–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if speaker_wav_path and speaker_wav_path.exists():
            try:
                speaker_wav_path.unlink()
                print(f"üóëÔ∏è Cleaned up speaker file: {speaker_wav_path}")
            except:
                pass
        
        return {
            'success': True,
            'message': f'–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {os.path.basename(output_path)}',
            'filename': os.path.basename(output_path)
        }
        
    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        print(f"‚ùå Full error traceback: {error_details}")
        raise HTTPException(status_code=500, detail=f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}')

@app.get('/models')
async def get_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    return {'models': AVAILABLE_MODELS}

@app.get('/test/{model_name}')
async def test_model(model_name: str):
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏"""
    try:
        from services.tts import generate_audio
        import tempfile
        import os
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_file:
            temp_path = temp_file.name
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
            generate_audio(
                text="Hello, this is a test.",
                model_name=model_name,
                output_path=temp_path,
                gpu=False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —Ç–µ—Å—Ç–∞
                language="en" if 'multilingual' in model_name else None
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
            if os.path.exists(temp_path) and os.path.getsize(temp_path) > 0:
                return {
                    'success': True,
                    'message': f'Model {model_name} works correctly',
                    'file_size': os.path.getsize(temp_path)
                }
            else:
                return {
                    'success': False,
                    'message': 'Model loaded but no audio generated'
                }
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_path):
                os.unlink(temp_path)
                
    except Exception as e:
        import traceback
        return {
            'success': False,
            'message': f'Error testing model: {str(e)}',
            'traceback': traceback.format_exc()
        }

@app.get('/speakers/{model_name}')
async def get_speakers(model_name: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏"""
    try:
        from services.tts import TTS, auto_accept_license, restore_stdin
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –¥–ª—è XTTS v2
        original_stdin = None
        if 'xtts' in model_name.lower():
            original_stdin = auto_accept_license()
        
        try:
            tts = TTS(model_name)
            tts.to('cpu')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–æ–¥–µ–ª–∏ —Å–ø–∏–∫–µ—Ä—ã
            speakers = []
            try:
                if hasattr(tts, 'speakers') and tts.speakers:
                    speakers = list(tts.speakers)
            except:
                pass
                
            return {
                'model_name': model_name,
                'speakers': speakers,
                'has_speakers': len(speakers) > 0
            }
        finally:
            if original_stdin:
                restore_stdin(original_stdin)
                
    except Exception as e:
        return {
            'model_name': model_name,
            'speakers': [],
            'has_speakers': False,
            'error': str(e)
        }

if __name__ == '__main__':
    import uvicorn
    uvicorn.run(app, host='0.0.0.0', port=8000)
