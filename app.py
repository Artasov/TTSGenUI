import os
import uuid
from pathlib import Path
from typing import List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–ø–∫–∏ –¥–ª—è –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π TTS
MODELS_DIR = Path(__file__).parent / 'models'
MODELS_DIR.mkdir(exist_ok=True)
os.environ['TTS_HOME'] = str(MODELS_DIR)

from fastapi import FastAPI, Request, Form, HTTPException, UploadFile, File
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

from services.tts import generate_audio

app = FastAPI(title='TTS Generator')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory='templates')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/output", StaticFiles(directory="output"), name="output")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('output', exist_ok=True)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = Path('uploads')
UPLOAD_DIR.mkdir(exist_ok=True)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ TTS —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
AVAILABLE_MODELS = {
    'üåç –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞': [
        {
            'id': 'tts_models/multilingual/multi-dataset/your_tts',
            'name': 'YourTTS Multilingual',
            'description': '–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –º–æ–¥–µ–ª—å —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤',
            'language': 'multilingual',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': True
        },
        {
            'id': 'tts_models/multilingual/multi-dataset/xtts_v2',
            'name': 'XTTS v2 Multilingual',
            'description': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –º–æ–¥–µ–ª—å —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞',
            'language': 'multilingual',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': True
        },
        {
            'id': 'tts_models/multilingual/multi-dataset/bark',
            'name': 'Bark Multilingual',
            'description': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –º–æ–¥–µ–ª—å —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞',
            'language': 'multilingual',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': True
        }
    ],
    'üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/en/ljspeech/tacotron2-DDC',
            'name': 'LJSpeech Tacotron2-DDC',
            'description': '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–Ω–≥–ª–∏–π—Å–∫–∞—è —Ä–µ—á—å, —á–µ—Ç–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False
        },
        {
            'id': 'tts_models/en/ljspeech/fast_pitch',
            'name': 'LJSpeech FastPitch',
            'description': '–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–µ—á–∏',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'medium',
            'voice_cloning': False
        },
        {
            'id': 'tts_models/en/ljspeech/glow-tts',
            'name': 'LJSpeech Glow-TTS',
            'description': '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–Ω–≥–ª–∏–π—Å–∫–∞—è —Ä–µ—á—å —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ç–µ–º–ø–∞',
            'language': 'en',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False
        }
    ],
    'üá©üá™ –ù–µ–º–µ—Ü–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/de/thorsten/tacotron2-DDC',
            'name': 'Thorsten Tacotron2-DDC',
            'description': '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–µ–º–µ—Ü–∫–∞—è —Ä–µ—á—å',
            'language': 'de',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False
        }
    ],
    'üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/fr/mai/tacotron2-DDC',
            'name': 'MAI French Tacotron2-DDC',
            'description': '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è —Ä–µ—á—å',
            'language': 'fr',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False
        }
    ],
    'üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/es/mai/tacotron2-DDC',
            'name': 'MAI Spanish Tacotron2-DDC',
            'description': '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏—Å–ø–∞–Ω—Å–∫–∞—è —Ä–µ—á—å',
            'language': 'es',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False
        }
    ],
    'üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/it/mai_female/glow-tts',
            'name': 'MAI Italian Female Glow-TTS',
            'description': '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∂–µ–Ω—Å–∫–∞—è —Ä–µ—á—å',
            'language': 'it',
            'gender': 'female',
            'quality': 'high',
            'voice_cloning': False
        },
        {
            'id': 'tts_models/it/mai_male/glow-tts',
            'name': 'MAI Italian Male Glow-TTS',
            'description': '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –º—É–∂—Å–∫–∞—è —Ä–µ—á—å',
            'language': 'it',
            'gender': 'male',
            'quality': 'high',
            'voice_cloning': False
        }
    ],
    'üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/ja/kokoro/tacotron2-DDC',
            'name': 'Japanese Kokoro Tacotron2-DDC',
            'description': '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —è–ø–æ–Ω—Å–∫–∞—è —Ä–µ—á—å',
            'language': 'ja',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False
        }
    ],
    'üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–µ –º–æ–¥–µ–ª–∏': [
        {
            'id': 'tts_models/zh-CN/baker/tacotron2-DDC-GST',
            'name': 'Chinese Baker Tacotron2-DDC-GST',
            'description': '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∏—Ç–∞–π—Å–∫–∞—è —Ä–µ—á—å',
            'language': 'zh',
            'gender': 'mixed',
            'quality': 'high',
            'voice_cloning': False
        }
    ]
}

def get_unique_filename(output_dir: str, filename: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    base_path = Path(output_dir) / filename
    if not base_path.exists():
        return str(base_path)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    stem = base_path.stem
    suffix = base_path.suffix
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π UUID
    unique_filename = f'{stem}_{uuid.uuid4().hex[:8]}{suffix}'
    return str(Path(output_dir) / unique_filename)

@app.get('/', response_class=HTMLResponse)
async def index(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π"""
    return templates.TemplateResponse('index.html', {
        'request': request,
        'models': AVAILABLE_MODELS
    })

@app.post('/generate')
async def generate_tts(
    text: str = Form(...),
    model_name: str = Form(...),
    output_filename: str = Form(...),
    speaker_file: UploadFile = File(None),
    language: str = Form(None)
):
    """API endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not text.strip():
            raise HTTPException(status_code=400, detail='–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        
        if not output_filename.strip():
            raise HTTPException(status_code=400, detail='–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ª—é–±–æ–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        model_exists = False
        for category_models in AVAILABLE_MODELS.values():
            for model in category_models:
                if model['id'] == model_name:
                    model_exists = True
                    break
            if model_exists:
                break
        
        if not model_exists:
            raise HTTPException(status_code=400, detail='–ù–µ–≤–µ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .wav –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not output_filename.endswith('.wav'):
            output_filename += '.wav'
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        output_path = get_unique_filename('output', output_filename)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–∑—Ü–∞ –≥–æ–ª–æ—Å–∞
        speaker_wav_path = None
        if speaker_file and speaker_file.filename:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            allowed_extensions = ['.wav', '.mp3', '.flac', '.m4a']
            file_ext = Path(speaker_file.filename).suffix.lower()
            if file_ext not in allowed_extensions:
                raise HTTPException(
                    status_code=400, 
                    detail=f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {", ".join(allowed_extensions)}'
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            speaker_filename = f'speaker_{uuid.uuid4().hex[:8]}{file_ext}'
            speaker_wav_path = UPLOAD_DIR / speaker_filename
            
            with open(speaker_wav_path, 'wb') as f:
                content = await speaker_file.read()
                f.write(content)
            
            print(f"üìÅ Speaker file saved: {speaker_wav_path}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        generate_audio(
            text=text,
            model_name=model_name,
            output_path=output_path,
            gpu=True,
            speaker_wav=str(speaker_wav_path) if speaker_wav_path else None,
            language=language
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–∑—Ü–∞ –≥–æ–ª–æ—Å–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if speaker_wav_path and speaker_wav_path.exists():
            try:
                speaker_wav_path.unlink()
                print(f"üóëÔ∏è Cleaned up speaker file: {speaker_wav_path}")
            except:
                pass
        
        return {
            'success': True,
            'message': f'–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {os.path.basename(output_path)}',
            'filename': os.path.basename(output_path)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}')

@app.get('/models')
async def get_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    return {'models': AVAILABLE_MODELS}

if __name__ == '__main__':
    import uvicorn
    uvicorn.run(app, host='0.0.0.0', port=8000)
