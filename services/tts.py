import os
import sys
from io import StringIO

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å BeamSearchScorer –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö transformers
def fix_transformers_compatibility():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–æ–≤—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ transformers"""
    try:
        import transformers
        from transformers import __version__ as transformers_version
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é transformers
        version_parts = transformers_version.split('.')
        major, minor = int(version_parts[0]), int(version_parts[1])
        
        # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è >= 4.40, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è BeamSearchScorer
        if major > 4 or (major == 4 and minor >= 40):
            print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å transformers >= 4.40")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è BeamSearchScorer
            import transformers.generation
            if not hasattr(transformers.generation, 'BeamSearchScorer'):
                class BeamSearchScorer:
                    def __init__(self, *args, **kwargs):
                        pass
                transformers.generation.BeamSearchScorer = BeamSearchScorer
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è BeamSearchScorer")
                
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {e}")

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
fix_transformers_compatibility()

from TTS.api import TTS  # noqa

os.makedirs("../output", exist_ok=True)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ–º—Å—è —Å –ª–∏—Ü–µ–Ω–∑–∏–µ–π XTTS v2
def auto_accept_license():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è XTTS v2"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏
    os.environ['COQUI_TOS_AGREED'] = '1'
    original_stdin = sys.stdin
    sys.stdin = StringIO('y\n')
    return original_stdin

def restore_stdin(original_stdin):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π stdin"""
    sys.stdin = original_stdin


def get_model_supported_languages(model_name: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏"""
    # –°–ª–æ–≤–∞—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    model_languages = {
        'tts_models/multilingual/multi-dataset/xtts_v2': ['en', 'es', 'fr', 'de', 'it', 'pt', 'pl', 'tr', 'ru', 'nl', 'cs', 'ar', 'zh-cn', 'ja', 'hu', 'ko', 'hi'],
        'tts_models/multilingual/multi-dataset/xtts_v1.1': ['en', 'es', 'fr', 'de', 'it', 'pt', 'pl', 'tr', 'ru', 'nl', 'cs', 'ar', 'zh-cn', 'ja', 'hu', 'ko', 'hi'],
        'tts_models/multilingual/multi-dataset/your_tts': ['en', 'fr-fr', 'pt-br'],
        'tts_models/multilingual/multi-dataset/bark': ['en', 'es', 'fr', 'de', 'it', 'pt', 'pl', 'tr', 'ru', 'nl', 'cs', 'ar', 'zh-cn', 'ja', 'hu', 'ko', 'hi'],
    }
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)
    return model_languages.get(model_name, None)

def generate_audio(
        text: str,
        model_name: str,
        output_path: str,
        gpu: bool = True,
        speaker_wav: str = None,
        language: str = None,
        speaker: str = None
):
    """
    Generate audio from text using Coqui TTS.
    @param text: Text to generate audio from.
    @param model_name: Model name to use.
    @param output_path: Path to save the audio.
    @param gpu: Whether to use GPU.
    @param speaker_wav: Path to speaker audio file for voice cloning.
    @param language: Language code for multilingual models.
    @param speaker: Speaker name for multi-speaker models.
    @return: None
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —è–∑—ã–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
    if language:
        supported_languages = get_model_supported_languages(model_name)
        if supported_languages and language not in supported_languages:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            if language == 'ru':
                alternative_models = [
                    'tts_models/multilingual/multi-dataset/xtts_v2',
                    'tts_models/multilingual/multi-dataset/xtts_v1.1'
                ]
                raise ValueError(
                    f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ (ru). "
                    f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {supported_languages}. "
                    f"–î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {', '.join(alternative_models)}"
                )
            else:
                raise ValueError(
                    f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —è–∑—ã–∫ '{language}'. "
                    f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {supported_languages}"
                )
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –¥–ª—è XTTS v2
    original_stdin = None
    if 'xtts' in model_name.lower():
        original_stdin = auto_accept_license()
    
    try:
        print(f"üîÑ Loading TTS model: {model_name}")
        tts = TTS(model_name)
        print(f"‚úÖ Model loaded successfully")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ gpu
        if gpu:
            try:
                import torch
                if torch.cuda.is_available():
                    tts.to('cuda')
                    print('üöÄ Using GPU acceleration')
                else:
                    print('‚ö†Ô∏è GPU not available, using CPU')
            except ImportError:
                print('‚ö†Ô∏è PyTorch not available, using CPU')
        else:
            tts.to('cpu')
            print('üíª Using CPU')
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥–µ–ª–∏
        print(f"üìã Model attributes: speakers={hasattr(tts, 'speakers')}, language={hasattr(tts, 'language')}")
        
    except Exception as e:
        print(f"‚ùå Error initializing TTS: {e}")
        print(f"üìã Model name: {model_name}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ Bark
        if 'bark' in model_name.lower():
            print("üîß Bark model failed, suggesting alternatives...")
            alternative_models = [
                'tts_models/multilingual/multi-dataset/xtts_v2',
                'tts_models/multilingual/multi-dataset/xtts_v1.1',
                'tts_models/multilingual/multi-dataset/your_tts'
            ]
            raise ValueError(
                f"–ú–æ–¥–µ–ª—å Bark –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. "
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(alternative_models)}"
            )
        
        raise
    finally:
        if original_stdin:
            restore_stdin(original_stdin)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    tts_params = {
        'text': text,
        'file_path': output_path
    }

    # –î–æ–±–∞–≤–ª—è–µ–º speaker_wav –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω (–¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞)
    if speaker_wav and os.path.exists(speaker_wav):
        tts_params['speaker_wav'] = speaker_wav
        print(f'üéØ Using speaker sample: {speaker_wav}')

    # –î–æ–±–∞–≤–ª—è–µ–º language –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if language:
        tts_params['language'] = language
        print(f'üåç Using language: {language}')

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è XTTS v2
    if 'xtts' in model_name.lower():
        # XTTS v2 —Ç—Ä–µ–±—É–µ—Ç –ª–∏–±–æ speaker_wav, –ª–∏–±–æ speaker –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤
        if not speaker_wav:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤
            try:
                speakers = tts.speakers
                if speakers and len(speakers) > 0:
                    print(f"üìã Available speakers: {speakers}")
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–ø–∏–∫–µ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ
                    if speaker and speaker in speakers:
                        tts_params['speaker'] = speaker
                        print(f"üéØ Using selected XTTS speaker: {speaker}")
                    else:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
                        first_speaker = list(speakers.keys())[0] if isinstance(speakers, dict) else speakers[0]
                        tts_params['speaker'] = first_speaker
                        print(f"üéØ Using first available XTTS speaker: {first_speaker}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤, XTTS v2 —Ç—Ä–µ–±—É–µ—Ç speaker_wav
                    print(f"üéØ No built-in speakers found for XTTS, speaker_wav required")
                    if not speaker_wav:
                        raise ValueError("XTTS v2 –Ω–µ –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±—Ä–∞–∑–µ—Ü –≥–æ–ª–æ—Å–∞ (3-10 —Å–µ–∫—É–Ω–¥ –∞—É–¥–∏–æ) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.")
            except Exception as e:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏–∫–µ—Ä–æ–≤, XTTS v2 —Ç—Ä–µ–±—É–µ—Ç speaker_wav
                print(f"üéØ Could not get XTTS speakers: {e}, speaker_wav required")
                if not speaker_wav:
                    raise ValueError("XTTS v2 –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–∏–∫–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±—Ä–∞–∑–µ—Ü –≥–æ–ª–æ—Å–∞ (3-10 —Å–µ–∫—É–Ω–¥ –∞—É–¥–∏–æ) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º speaker –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω (–¥–ª—è –º–æ–¥–µ–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–ø–∏–∫–µ—Ä–∞–º–∏)
        if speaker:
            tts_params['speaker'] = speaker
            print(f'üé§ Using speaker: {speaker}')
        elif not speaker_wav and 'multilingual' in model_name:
            # –î–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –±–µ–∑ speaker_wav –∏—Å–ø–æ–ª—å–∑—É–µ–º default speaker
            try:
                speakers = tts.speakers
                if speakers and len(speakers) > 0:
                    first_speaker = list(speakers.keys())[0] if isinstance(speakers, dict) else speakers[0]
                    tts_params['speaker'] = first_speaker
                    print(f"üéØ Using multilingual speaker: {first_speaker}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
                    tts_params['speaker'] = 'female'
                    print(f"üéØ Using default speaker for multilingual model")
            except:  # noqa
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏–∫–µ—Ä
                tts_params['speaker'] = 'female'
                print(f"üéØ Using fallback default speaker for multilingual model")

    try:
        print(f"üéµ Generating audio with parameters: {tts_params}")
        print(f"üìã Model: {model_name}")
        print(f"üìã Has speaker_wav: {bool(speaker_wav)}")
        print(f"üìã Has speaker: {bool(speaker)}")
        print(f"üìã Has language: {bool(language)}")
        
        tts.tts_to_file(**tts_params)
        print(f"‚úÖ Audio saved: {output_path}")
    except Exception as e:
        print(f"‚ùå Error generating audio: {e}")
        print(f"üìã Parameters used: {tts_params}")
        print(f"üìã Model name: {model_name}")
        raise
